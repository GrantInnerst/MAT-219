{
  "hash": "70375d3e79445399cf743b7bd5922d85",
  "result": {
    "markdown": "---\ntitle: \"Homework 1 - You Can Be A Baseball Analytics Star Too!\"\nformat: pdf\n---\n\n\n\n## The Lahman Package\n\nSean Lahman is an author and journalist, who led the fight to make sports data open to the public. One of his most famous efforts was creating an open-source database of baseball data. A version of his database is in R through the __Lahman__ package. In this homework, we will practice our skills at making plots! Much of the \"grunt\" work will be done by me, but you will still have plenty to do and change!!\n\n## Loading packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| message: false\n\n# You may have to install these packages before the document will knit. I have\n# included the installation lines below but commented out! Get rid of the\n# hashtags before running. You only have to install the package once, but every\n# time you knit the document you need to have the library statements because it\n# opens up a fresh session of R behind the scenes.\n\n# install.packages(\"tidyverse\")\n# install.packages(\"Lahman\")\n\n# loading the tidyverse and setting the theme to black-white (it's my favorite theme)\nlibrary(\"tidyverse\");theme_set(theme_bw())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# loading the Lahman package\nlibrary(\"Lahman\")\n```\n:::\n\n\n\nNow that we have everything installed and loaded into R, we can take a look at all of the datasets in the Lahman package... and there are a lot of them! Running the code `data(package = \"Lahman\")` will open a list of data sets in the Lahman package. There are 30 datasets in total! We will focus on the `Batting` dataset. Here it is below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# original data is a data frame but tibbles are nicer to work with\nbatting <- as_tibble(Batting)\n\n# let's look at the range of years we have! \nbatting$yearID %>% range()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1871 2022\n```\n:::\n\n```{.r .cell-code}\n# from 1871 to 2022! That's a lot! \n```\n:::\n\n\n\nNotes about the code above: \n\n- parentheses around an assignment statement will print the result\n- the `$` operator will access the specific variable in the tibble\n- The `%>%` is called the pipe operator and takes the result of the left side and puts it in the first argument of the function on the right.\n\nThat's a lot of data (147 years worth) in there! Let's hone in on something interesting in baseball's past that would be cool to look at! In 1969, the MLB lowered the pitching mound by 10 inches and shrunk the strike zone to what it is today. This really benefited the batters and took a huge advantage away from pitchers. Thus, let's look at batting averages for those two seasons and see if there is a difference graphically. Specifically, let's make a side-by-side boxplot to carry out our comparison. The code below carries out this task (almost!). \n\nDescription and comments of the code below:\n\n- This code below is often called a data analysis pipeline because I can change the years or the minimum at-bats, and get a whole different analysis (here just a plot) without having to re-write any code.\n- I also hope that you notice/think this code is pretty readable! Without any R knowledge, you could probably tell me what is happening. That is what the tidyverse is trying to do!\n- Code steps explanation:\n    + The first step filters the data to only include the years 1968 and 1969. The `|` represents or and to check equality is `==`. A single `=` is assigning a value to a variable.\n    + The second step changes the `yearID` variable to be a factor (categorical variable) because R will yell at you if year is still a numeric value when plotting.\n    + The third step filters the dataset so that only players with more than 50 at-bats are included. This was a personal choice that you can change if you want! It gets rid of some outliers due to players only batting a few times that year.\n    + The fourth step creates a new variable, `avg` that holds the batting average, because it was not present in the original dataset.\n\n__Problem 1__: The code below doesn't create the side-by-side boxplot of batting average for the two years mentioned above. You need to complete the code so that it produces the correct plot! I have included the ggplot call but you need to choose the right aesthetics and finish the `geom_` call. Make sure to remove the hashtags before the last `%>%` and the `ggplot` call or it won't make the graph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n batting %>% \n    filter(yearID == 1968 | yearID == 1969) %>%\n    mutate(yearID = as_factor(yearID)) %>% \n    filter(AB > 50) %>% \n    mutate(avg = H / AB)  # %>% \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 871 × 23\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>     <fct>  <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 aaronha01 1968       1 ATL    NL      160   606    84   174    33     4    29\n 2 aaronto01 1968       1 ATL    NL       98   283    21    69    10     3     1\n 3 adairje01 1968       1 BOS    AL       74   208    18    45     1     0     2\n 4 adlesda01 1968       1 HOU    NL       40   104     3    19     1     1     0\n 5 ageeto01  1968       1 NYN    NL      132   368    30    80    12     3     5\n 6 alcarlu01 1968       1 LAN    NL       41   106     4    16     1     0     2\n 7 allenbe01 1968       1 WS2    AL      120   373    31    90    12     4     6\n 8 allendi01 1968       1 PHI    NL      152   521    87   137    17     9    33\n 9 allenha02 1968       1 WS2    AL       68   128    16    28     2     2     1\n10 alleyge01 1968       1 PIT    NL      133   474    48   116    20     2     4\n# ℹ 861 more rows\n# ℹ 11 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>, avg <dbl>\n```\n:::\n\n```{.r .cell-code}\n    # ggplot(aes()) + geom_()\n```\n:::\n\n\n\n__Problem 2__: Comment on the plot's findings.\n\n**Answer:** \n\n\nAnother interesting time in baseball was the steroid era, which I will define as the 1990's! During this time, an increased number of major league players used performance enhancing drugs. One way that we could explore the data to see if there were any side-effects is looking at home run production. Specifically, I want to make a plot of the total home run count for every year between 1980 and 2000 with dots and a path between them. This will give us some reference for before and during the time when steroids were present. For this plot, I also want to put the actual home run totals on the plot above the points.\n\n__Problem 3__: Again, fill in the correct aesthetics that are missing and the correct geoms to make the points and the path between them. Again make sure to take away the hashtags to produce the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatting %>% \n    filter(yearID >= 1980 & yearID <= 2000) %>% \n    group_by(yearID) %>% \n    summarize(hr_total = sum(HR)) # %>% \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 2\n   yearID hr_total\n    <int>    <int>\n 1   1980     3087\n 2   1981     1781\n 3   1982     3379\n 4   1983     3301\n 5   1984     3258\n 6   1985     3602\n 7   1986     3813\n 8   1987     4458\n 9   1988     3180\n10   1989     3083\n# ℹ 11 more rows\n```\n:::\n\n```{.r .cell-code}\n     # ggplot(aes( , , label = hr_total)) + geom_() + geom_() + geom_label(size = 3, vjust = -.25) + labs(x = \"Year\", y = \"Home Run Total\")\n```\n:::\n\n\n\n__Problem 4__: Comment on the plot. Does it seem to support increased doping in that time span? Do you think any external factors other than doping could have affected the increase?\n\n**Answer:** \n\n\nOne of the most famous players in the doping era was Barry Bonds. Barry Bonds played for the Pittsburgh Pirates early in his career and was very successful there, but it wasn't until he started playing for the San Francisco Giants that he started putting up huge home run numbers. If you look up \"Barry Bonds Doping\", you will find many  pictures of the difference in body mass between Pittsburgh and in San Francisco. Many people point to that as evidence toward doping. Let's look at his career trajectory through his home run production.\n\n__Problem 5__: I have done the filtering for you, but I want you to create the entire ggplot by yourself! I have the ggplot call there but nothing else. Remember to chain ggplot2 statements together with `+`'s Do the following:\n\n- Create a point plot of home runs over the years he was active.\n- Color the points with the team he was playing for at the time. You'll need to add another aesthetic.\n- Change the labels to be more descriptive.\n- Change the legend so that the legend title says Team and the team name is what's describing the color (Pirates, Giants). You will accomplish this with the function `scale_color_discrete()`. Make sure to look it up for reference.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbatting %>% \n    filter(playerID == \"bondsba01\") #%>% \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 bondsba01   1986     1 PIT    NL      113   413    72    92    26     3    16\n 2 bondsba01   1987     1 PIT    NL      150   551    99   144    34     9    25\n 3 bondsba01   1988     1 PIT    NL      144   538    97   152    30     5    24\n 4 bondsba01   1989     1 PIT    NL      159   580    96   144    34     6    19\n 5 bondsba01   1990     1 PIT    NL      151   519   104   156    32     3    33\n 6 bondsba01   1991     1 PIT    NL      153   510    95   149    28     5    25\n 7 bondsba01   1992     1 PIT    NL      140   473   109   147    36     5    34\n 8 bondsba01   1993     1 SFN    NL      159   539   129   181    38     4    46\n 9 bondsba01   1994     1 SFN    NL      112   391    89   122    18     1    37\n10 bondsba01   1995     1 SFN    NL      144   506   109   149    30     7    33\n# ℹ 12 more rows\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n:::\n\n```{.r .cell-code}\n    #ggplot() \n```\n:::\n\n\n\n__Problem 6__: Comment on the plot.\n\n\nFor this last plot, I want you to think of your favorite baseball player. If you don't have one or don't care about baseball, then search for the list of the greatest baseball hitters of all time and choose from one of those. We are going to plot their batting average over time and compare it to every other player in the `Batting` dataset! Specifically, we are going to do the following:\n\n- Search for the `playerID` of your person.\n- Create a separate dataset just for them and make the batting average variable.\n- Create a dataset for everyone else that only contains batting averages for seasons with more than 50 at-bats. Also, we need to standardize the years so that they all fit on one plot.\n- Plot the averages over the career years with a line in the background.\n- Overlay your favorite players in red. \n\n\nTo find your player, we need to look in the `People` dataset that contains personal information about them. For instance, if I was looking for a player named Roberto Clemente, I would do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(People, nameLast == \"Clemente\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   playerID birthYear birthMonth birthDay birthCountry birthState birthCity\n1 clemeed02      1975         12       15         P.R.       <NA>  Santurce\n2 clemero01      1934          8       18         P.R.       <NA>  Carolina\n  deathYear deathMonth deathDay deathCountry deathState deathCity nameFirst\n1        NA         NA       NA         <NA>       <NA>      <NA>    Edgard\n2      1972         12       31         P.R.       <NA>  San Juan   Roberto\n  nameLast               nameGiven weight height bats throws      debut\n1 Clemente Edgard Alexis Velazquez    188     71    R      R 1998-09-10\n2 Clemente                 Roberto    175     71    R      R 1955-04-17\n   finalGame  retroID   bbrefID  deathDate  birthDate\n1 2000-07-31 cleme001 clemeed02       <NA> 1975-12-15\n2 1972-10-03 clemr101 clemero01 1972-12-31 1934-08-18\n```\n:::\n:::\n\n\n \nNext, make a dataset with just that player. Also, add two new variables. One is the batting average and two is the career years that the person played. For instance, if I were to make one for Roberto, it would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclem_bat <- batting %>% \n    filter(playerID == \"clemero01\") %>% \n    mutate(avg = H / AB, career = yearID - min(yearID))\n\n# put yours below\n```\n:::\n\n\n\nNow we are going to do the same thing for everyone else, and add in the more than 50 AB condition!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nother_bats <- batting %>% \n    filter(AB > 50) %>% \n    group_by(playerID) %>% \n    arrange(playerID, yearID, teamID) %>%\n    mutate(avg = H / AB, career = yearID - min(yearID))\n```\n:::\n\n\n\nLastly, we need to make the plot! Here are the steps you should follow to make the plot:\n\n__Problem 7__:\n\n- First call `ggplot()` using the `other_bats` data with aesthetics to show change in batting average over time.\n- Add on a geom that tracks the path from one year to another. Don't use dots. In your call to the geom, make sure to add the statement `alpha = 0.02`. This is called alpha blending and it help you avoid overplotting!\n- Make the x axis go from 0 to 20 by 5 and the y axis go from 0 to 0.4 by 0.1. This is accomplished by adding the two lines `scale_x_continuous(\"Career Year\", breaks = seq(0, 20, 5), limits = c(0, 20))` and `scale_y_continuous(\"Batting Average\", breaks = seq(0, 0.4, 0.1), limits = c(0, 0.4))`. This will also fix the labels.\n- Lastly, make another line/path using just the data from your player's small dataset and color it red.\n\nPut the code in the empty code chunk below.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n__Extra Credit__: If you are really interested in making these plots, I challenge you to try and recreate the plot below about Pete Rose.\n\n![](img/pete_rose_pic.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
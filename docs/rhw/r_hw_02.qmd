---
title: "R Homework 2: Subsetting and Plotting"
author: "PUT YOUR NAME HERE"
format: pdf
---

In this assignment, you are going to learn how to manipulate the objects you made in the last homework. There will also be a section at the end where you practice some basic plotting skills. Each R assignment will become a little less structured to challenge your skills. 

# Extracting Parts Of A Data Structure

Being able to pick out certain elements of the objects you made previously (vectors, matricies, data frames/tibbles, and lists) is an extremely important skill and will make you life significantly easier down the road!

## Vectors

The functions (operators) you use for extracting/subsetting are `[`, `[[`, and `$`. The single bracket is the basic subsetting operator and works on basically any object type. Below I have a few examples of extracting elements of a numeric vector. 

```{r}
vec <- c(5.5, 4.2, 3.6, 5.9)

# extract the first element
vec[1]

#extract the 4th element
vec[4]

# extract multiple (2nd and 4th) elements
vec[c(2,4)]

# extract all but the first element with the negative sign
vec[-1]

# you can use logical elements as long as it's the same length as the original dataset
vec[c(T, F, F, T)]
```


As you saw above, you can do a lot inside the bracket! You could also extract an element by its name if you object is a named vector (we'll talk about those eventually) In the chunk below, I want you to complete the following

 * Make a vector (you can name it whatever you want except for `vec`) that has the elements 1 through 10 using the `:` operator
 * Extract the 1st element
 * Extract the 5th element
 * Extract the 4th and 9th element
 * Extract everything but the 8th element
 
```{r}

```


On a side note, extracting with logicals is often done implicitely with relational operators like `>`, `<=`, `==`, and `!=`. Here are some examples with my `vec` vector above:

```{r}
# check if each element of vec is greater than 5 (Some R operations are vectorized). This gives me a vector of T's and F's.
vec > 5

# I can subset with that vector of T's and F's

vec[vec > 5]
```


Use your created vector to complete the following tasks:

 * Check to see which indicies are greater than or equal to 7.
 * Subset the vector so that only indicies that are greater than or equal to 7 stay.
 
```{r}

```
 
 
## Matricies and Data Frames
 
When you advance to 2 dimensional vectors (which are called matricies or data frames sort of) you still use the single brackets `[`, but now you include a comma to deliniate rows and columns. So if I had a matrix called `mat` and I wanted to select the element in the first row and first column I would write `mat[1,1]`. When you want to select over a row or column (ex first row with all of the columns), you leave the index corresponding to the "conditioning" varaible blank. For instance, `mat[1, ]` will give me the first row and all columns while `mat[,1]` will give me the first column and all the rows. Here's an example:

```{r}
df <- data.frame(col1 = 1:10, col2 = 11:20)

# selecting first row 
df[1,]

# selecting second column
df[,2]
```

Below I made a matrix called `mat` which is a `3 x 3` matrix containing the integers 1 through 9. Using that matrix, I want you to complete the following tasks:

* Extract the element in the first row and third column
* Exctract the second row
* Extract the third column

```{r}
mat <- matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE)


```




## Data Frames and Lists

For data frames/tibbles and lists, we can use all three operators discussed at the beginning of the document (`[`, `[[`, and `$`). Lists are structures that can hold almost anything in their elements. When trying to access elements of the list, we could start by using the single bracket `[`. It turns out that the single bracket does work, but the catch is that the output will be a list as well. Many arithmetic operations are not defined for lists and so the single bracket approach may not be what you are interested in using. Look at the example below:

```{r}
(l <- list(a = c(TRUE, FALSE, TRUE), b = 1:3, c = c("c", "b", "a")))

l[2]
```

It looks like the extraction worked, and it did, but the result is a list of length 1 that contains the vector, which is different than vector itself. For instance, if you would run the `sum` function on `l[2]` you would expect the result of 6, but you'd get an error because `sum` does not operate on lists. To dig down into the list, we need to use the double bracket `[[`. Thus, `l[[2]]` will pull out the vector in the second element of the list. I'll show you below.

```{r}
l[[2]]

sum(l[[2]])
```

You can also use the double brackets to extract by the name of the element. Thus, `l[["b"]]` will extract the second element of the list. Now that is a lot of typing! So the developers of R put in the `$` as shorthand for the double brackets when using names. Thus, `l[["b"]]` and `l$b` are the same thing. You can see the behavior below:

```{r}
l$b
```

Data frames are special types of lists and so follow the same subsetting rules as lists. All the variables in a data frame need to have names, and so the `$` operator is the primary subsetting operator.

I want you to use the `mtcars` dataset (is loaded into R by default) to complete the following tasks:

* Pull the `mpg` variable from `mtcars` with `$`
* Pull the `wt` variable from `mtcars` with `$`
* Pull the `disp` variable from `mtcars` with `$`

```{r}

```



# Graphing

As we learned in class, the plotting package we use in this course is `ggplot2`. Please install the `tidyverse` so we can use `ggplot2`. I've placed the code to library the package below. The dataset we will use for plotting is going to be a dataset on Pokemon. The dataset should already exist in your project and I've place the code below to load it into your workspace

```{r}

#| message: false


# I like theme_bw(), but feel free to change it to whatever you want!
library("tidyverse");theme_set(theme_bw())
pokemon <- read_csv("pokemon.csv")
```


Complete the following tasks:

* Make a histogram of `HP`
* Make a bar chart of ``Type 1``
* Make a scatterplot of `Attack` by `Defense`
* Make a scatterplot of `Attack` by `Defense` and color the points by `Generation`. This is tricky because we know that generation is discrete and so should get a discrete palette, but by default R sees it as numeric. Thus, it will get a color scale instead of separate colors. To fix this issue, wrap `Generation` in the function `as.factor()` we'll talk about factors later! Basically they change quantitative variables to categorical variables. 
* Make a scatterplot of `Attack` by `Defense` and color the points by `Legendary`.
* For the last plot, I want you to come up with a plot of your own design! It can be as simple or as complex as you see fit! Just make sure it's not the same as a plot I wanted you to make above. You can make more than one plot if you really get in the plot-making groove.

```{r}
# make the histogram of hp here

```

```{r}
# make the bar chart of Type 1 here

```

```{r}
# make the first scatterplot here

```

```{r}
# make the second scatterplot here!

```

```{r}
# make the third scatterplot here!

```

```{r}
# make your own plot / plots here!

```

---
title: "R Homework 1: The Basics"
author: "PUT YOUR NAME HERE"
format: html
---

```{r setup}
#| include: false
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
```

In this assignment, you are going to explore the very basics of R and how it behaves as a programming language! I really like the language and I hope you will too! Or at least not hate it!


# Packages

When you download R, it comes with basic computing abilities and a few packages pre-downloaded. I will refer to those functions and capabilities as "base" R. While base R gives us the capability to many things, we may want specialized functions to quickly and efficiently complete tasks. When developers create the specialized functions, they "package" them together for others to use in something called a package. There are a lot of R packages! Currently there are over 18000 R packages on the Comprehensive R Archive Network (CRAN). To get your package on CRAN, it needs to meet a few criteria, so these are more or less polished packages. Countless other packages exist on GitHub, a social coding platform, that may be more experimental in nature, newer versions of packages on CRAN, or may not meet CRAN standards for some reason.  

## Installing and Loading Packages

To use functions in those packages, you've got to install the packages onto your computer/computing environment and then load the package into your current R session. You only have to install the package once per environment, but you have to load the package every time you start an R session. To install a package from CRAN, you will use the function `install.packages()`. You place the name of the package inside the parentheses in quotations. If I wanted to load the `tidyverse` package, a package that we will be using a lot this semester, I would run `install.packages("tidyverse")`. In the code chunk below, I would like you to install the `remotes` package.

```{r install package}

```

It is important to remember that you only have to install a package once. In fact, it's dangerous to leave an `install.packages` line in your R Markdown document it, so I want you to comment out that line after it is run. You comment out code in R by using the `#` symbol. Comment out the line above now. 

Once we've installed the package, we need to load it into our current R session. You do so with the `library()` function. Again, you supply the name of the package in quotations. Thus, it would look like `library("tidyverse")`. Library the `remotes` package below so we can use it!

```{r library package}

```

The reason why I had you load that package is that it contains functions to allow you to install packages that aren't on CRAN. Most often, these packages will come from GitHub and so we want to use the function `install_github()`. Inside the function, you need to provide the package name and the GitHub username. For example, if I want to install the `mpoly` package from the GitHub user dkahle, I would run `install_github("dkahle/mpoly")`. I want you to install the `emo` package from the GitHubuser hadley. Upon installing the package, comment out the install line and library the function. Use the function `ji()` to print an emoji of your choice. For example, if I wanted the poop emoji, I would write the code `ji("poop")`. Look here for the list of all emojis: <https://github.com/hadley/emo>

```{r}

```

One last note on packages: There are cases where multiple packages have functions with the same name and that creates confusion on which one is being used when you call the function. If you want to be sure you have the right function you can use the `::` operator to specify the package and function. The syntax is `package::function` so if I wanted to be sure I use the `acf()` function from the `stats` package, I would write `stats::acf()`. This also a way to use a function without loading the package first. 


# R As A Calculator


R can do mathematical calculations like a regular calculator! It has all of the ordinary arithmetic operations like `+`, `-`, `*`, `/`, and `^`. It also contains other mathematical operations like `sqrt()`, `sin()`, `log()`, and others. R also contains transcendental numbers like `pi` and `exp(1)`. Infinity is `Inf`, and negative infinity is `-Inf`. `NaN` governs not a number, which is to be distinguished from `NA` (a missing value), or `NULL`, the null object.

Complete the following exercises:

Add 4 and 5.

```{r}

```

Multiply 5 and 4. Note that `5(4)` will not work.

```{r}

```

Evaluate 5 cubed. 

```{r}

```


# Variables and Assignment

To assign a value to a variable, R uses `<-` as the assignment operator. The equal sign `=` also works for assignment, but the two are not the same and you should use `<-`. You can assign almost anything to a variable and you don't need to pre-assign a variable type. 

Assign the variable `x` the value `5` and add 3 to `x` on the next line.

```{r}

```


By default, assigning an object a value does not print the object. If you want this functionality, you can either use the `print()` function or by wrapping the assignment with `()` i.e. `(y <- 2)`.

Assign the the phrase "R is awesome" to the variable `truth` and print the result. Hint: Use quotations around the phrase like it is written above. 

```{r}

```


# Data Types

There are four basic data types that exist in R: logical, double, integer, and character. 

* Logicals: `TRUE` or `T` and `FALSE` or `F`. You can use the full word or singular letter interchangeably. Good coding practice says you should use the full word.
* Doubles: The default for all numbers. 
* Integers: To get an integer, you need to add an `L` to the end of your number. For example, if I wanted the integer 5, I would write `5L`
* Characters: This is the default for all non-numeric things. To make a character, you wrap the text in quotations. For example, `5.2` is a double while `"5.2"` would be a character. 

If you are not sure of an object's type, you can use the `str()` function to find that information.



Assign the variable `int` the integer 85 and check the type with `str()`

```{r}

```

Assign the variable `foo` the logical `TRUE` and assign the variable `bar` the double 4.5. Now add `foo` and `bar`! 

```{r}

```


From the previous exercise, you should notice that sometimes you can perform arithmetic operations on objects of different types! There is a hierarchy of data types when it comes to arithmetic operations in the sense that R will try to convert one data type into another in order to do different arithmetic operations. You won't really need to worry about these conversions, but there are a few data tasks where they are useful.
    

# Data Structures

In this section, we'll discuss the basic data structures that you'll encounter in R. This is not an exhaustive discussion on structures, but should give you enough to give you a base!

## Vector

A vector is a sequence of the basic data types we discussed above. Elements of a vector need to match types. The most common way to make a vector is with the `c()` function. For example, `c(1,3,5)` will make a vector of length 3 that contains the doubles 1, 3, and 5. 

Make a vector that contains the characters `a`, `b`, and `c`.

```{r}

```

It may also be desirable to create vectors of integer sequences. This can easily be done with the `:` (colon) operator. For example, the code `1:10` will create a vector with the integers 1, 2, ..., 10. It also goes in reverse!

Create a integer sequence vector that starts at 4 and ends at -2. Then create a integer sequence vector that starts at 2 and ends at 20. 

```{r}

```

Other functions we may utilize that create vectors are `seq()` and `rep()`. As their names suggest, `seq()` will create sequences (of doubles) and `rep()` will repeat whatever object you provide for a predefined number of times. For example, `seq(from = 1, to = 4, by = .1)` will create a vector that contains elements that increments from 1 to 4 by .1. `rep(10, 5)` will create a vector that repeats the double 10, 5 times. 

Create a sequence from 1 to 10, by 2.

```{r}

```

## Matricies

Like a matrix is like a vector, but now has rows and columns (2-dimensional instead of 1). All elements of a matrix need to be of the same type. We won't use matrices in the course, so we won't dwell on them further.


## Data Frames and Tibbles

The most common data structure we will use in this course is a data frame (really we will use its "tidy" cousin, the tibble). You can think of a data frame like a spreadsheet you may see in Excel. You can also think of a data frame like a matrix, but you can have different data types in different columns. The rows of a data frame usually represent observations and the columns represent variables. The tibble is a slight variation on the data frame that has some nice properties we'll discuss later in the course. Below is an example of making a data frame:

```{r}
(df <- data.frame(heights = c(4.4, 5.6, 3.2, 4.1),
                 age_type = c("young", "old", "old", "young"),
                 overweight = c(T, F, F, T)))
```

Make a data frame of your choice that has at least 5 observations and 3 columns.

```{r}

```


## Lists

A list is the most flexible object one can use in R. Technically, a list is a vector whose elements are not required to be of the same type. Lists can also hold objects that vectors can't. You initiate a list using the `list()` function. Here is an example:

```{r}
(var <- list(TRUE, 1:3, rnorm(3), data.frame(a = 1:2, b = 3:4)))
```

Make a list and include anything you want!

```{r}

```


That's your first assignment! You did it! Congratulations!
